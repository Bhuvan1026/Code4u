from math import *
from collections import *
from sys import *
from os import *
import math

'''

    class Node:
        def __init__(self, data):
            self.data = data
            self.next = None

'''
def len_count(head):
    count=0
    while(head.next!=None):
        count=count+1
        head=head.next
    return count+1


def findMiddle(head):
    # Write your code here
    # head denoted head of linked list
    """
    if not head:
        return None
    count=len_count(head)
    if(count%2!=0):
        x=math.ceil(count/2)
        count_node=1
        while(head):
            if(x==count_node):
                
                
                return head
            head=head.next
            count_node=count_node+1
    else:
        x=math.ceil(count/2)+1
        count_node=1
        while(head):
            if(x==count_node):
                return head
            
            head=head.next
            count_node=count_node+1
    """
#method 2
    if not head:
        return None
    slow=head
    fast=head
    while(fast and fast.next):
        slow=slow.next
        fast=fast.next.next
    return slow
            
