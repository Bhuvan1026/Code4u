class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        rows=len(matrix)
        col=len(matrix[0])
        top=0
        bottom=rows-1
        left=0
        right=col-1
        result=[]
        while(len(result)< rows*col):
            for i in range(left,right+1):
                result.append(matrix[top][i])
            top+=1

            for i in range(top,bottom+1):
                result.append(matrix[i][right])
            right-=1

            if top<=bottom:
                for i in range(right,left-1,-1):
                    result.append(matrix[bottom][i])
                bottom-=1
            if left<=right:
                for i in range(bottom,top-1,-1):
                    result.append(matrix[i][left])
                left+=1
        return result

        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
from typing import List

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        result = []
        while matrix:
            result += matrix.pop(0)  # Add the first row to result
            if matrix and matrix[0]:  # Check if there's anything left to process
                for row in matrix:
                    result.append(row.pop())  # Add the last element of each remaining row
            if matrix:
                result += matrix.pop()[::-1]  # Add the last row in reverse
            if matrix and matrix[0]:
                for row in matrix[::-1]:
                    result.append(row.pop(0))  # Add the first element of each remaining row in reverse order
        return result





